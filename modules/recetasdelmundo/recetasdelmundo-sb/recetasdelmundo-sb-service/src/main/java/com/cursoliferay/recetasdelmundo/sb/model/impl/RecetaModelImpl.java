/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.cursoliferay.recetasdelmundo.sb.model.impl;

import com.cursoliferay.recetasdelmundo.sb.model.Receta;
import com.cursoliferay.recetasdelmundo.sb.model.RecetaModel;
import com.cursoliferay.recetasdelmundo.sb.model.RecetaSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.kernel.util.Validator;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Receta service. Represents a row in the &quot;RDM_Receta&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>RecetaModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RecetaImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see RecetaImpl
 * @generated
 */
@JSON(strict = true)
public class RecetaModelImpl
	extends BaseModelImpl<Receta> implements RecetaModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a receta model instance should use the <code>Receta</code> interface instead.
	 */
	public static final String TABLE_NAME = "RDM_Receta";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"recetaId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"nombre", Types.VARCHAR}, {"descripcion", Types.VARCHAR},
		{"numeroComensales", Types.INTEGER}, {"aptaCeliacos", Types.BOOLEAN}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("recetaId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("nombre", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("descripcion", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("numeroComensales", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("aptaCeliacos", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE =
		"create table RDM_Receta (uuid_ VARCHAR(75) null,recetaId LONG not null primary key,companyId LONG,groupId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,nombre STRING null,descripcion VARCHAR(75) null,numeroComensales INTEGER,aptaCeliacos BOOLEAN)";

	public static final String TABLE_SQL_DROP = "drop table RDM_Receta";

	public static final String ORDER_BY_JPQL = " ORDER BY receta.nombre ASC";

	public static final String ORDER_BY_SQL = " ORDER BY RDM_Receta.nombre ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long MODIFIEDDATE_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long USERID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long NOMBRE_COLUMN_BITMASK = 64L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static Receta toModel(RecetaSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Receta model = new RecetaImpl();

		model.setUuid(soapModel.getUuid());
		model.setRecetaId(soapModel.getRecetaId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setGroupId(soapModel.getGroupId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setNombre(soapModel.getNombre());
		model.setDescripcion(soapModel.getDescripcion());
		model.setNumeroComensales(soapModel.getNumeroComensales());
		model.setAptaCeliacos(soapModel.isAptaCeliacos());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<Receta> toModels(RecetaSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Receta> models = new ArrayList<Receta>(soapModels.length);

		for (RecetaSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public RecetaModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _recetaId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRecetaId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _recetaId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Receta.class;
	}

	@Override
	public String getModelClassName() {
		return Receta.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Receta, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Receta, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Receta, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Receta)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Receta, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Receta, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Receta)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Receta, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Receta, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Receta>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Receta.class.getClassLoader(), Receta.class, ModelWrapper.class);

		try {
			Constructor<Receta> constructor =
				(Constructor<Receta>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Receta, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Receta, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Receta, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Receta, Object>>();
		Map<String, BiConsumer<Receta, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Receta, ?>>();

		attributeGetterFunctions.put("uuid", Receta::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Receta, String>)Receta::setUuid);
		attributeGetterFunctions.put("recetaId", Receta::getRecetaId);
		attributeSetterBiConsumers.put(
			"recetaId", (BiConsumer<Receta, Long>)Receta::setRecetaId);
		attributeGetterFunctions.put("companyId", Receta::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<Receta, Long>)Receta::setCompanyId);
		attributeGetterFunctions.put("groupId", Receta::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Receta, Long>)Receta::setGroupId);
		attributeGetterFunctions.put("userId", Receta::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Receta, Long>)Receta::setUserId);
		attributeGetterFunctions.put("userName", Receta::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<Receta, String>)Receta::setUserName);
		attributeGetterFunctions.put("createDate", Receta::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<Receta, Date>)Receta::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", Receta::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate", (BiConsumer<Receta, Date>)Receta::setModifiedDate);
		attributeGetterFunctions.put("nombre", Receta::getNombre);
		attributeSetterBiConsumers.put(
			"nombre", (BiConsumer<Receta, String>)Receta::setNombre);
		attributeGetterFunctions.put("descripcion", Receta::getDescripcion);
		attributeSetterBiConsumers.put(
			"descripcion", (BiConsumer<Receta, String>)Receta::setDescripcion);
		attributeGetterFunctions.put(
			"numeroComensales", Receta::getNumeroComensales);
		attributeSetterBiConsumers.put(
			"numeroComensales",
			(BiConsumer<Receta, Integer>)Receta::setNumeroComensales);
		attributeGetterFunctions.put("aptaCeliacos", Receta::getAptaCeliacos);
		attributeSetterBiConsumers.put(
			"aptaCeliacos",
			(BiConsumer<Receta, Boolean>)Receta::setAptaCeliacos);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getRecetaId() {
		return _recetaId;
	}

	@Override
	public void setRecetaId(long recetaId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_recetaId = recetaId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalUserId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("userId"));
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public Date getOriginalCreateDate() {
		return getColumnOriginalValue("createDate");
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public Date getOriginalModifiedDate() {
		return getColumnOriginalValue("modifiedDate");
	}

	@JSON
	@Override
	public String getNombre() {
		if (_nombre == null) {
			return "";
		}
		else {
			return _nombre;
		}
	}

	@Override
	public String getNombre(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getNombre(languageId);
	}

	@Override
	public String getNombre(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getNombre(languageId, useDefault);
	}

	@Override
	public String getNombre(String languageId) {
		return LocalizationUtil.getLocalization(getNombre(), languageId);
	}

	@Override
	public String getNombre(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getNombre(), languageId, useDefault);
	}

	@Override
	public String getNombreCurrentLanguageId() {
		return _nombreCurrentLanguageId;
	}

	@JSON
	@Override
	public String getNombreCurrentValue() {
		Locale locale = getLocale(_nombreCurrentLanguageId);

		return getNombre(locale);
	}

	@Override
	public Map<Locale, String> getNombreMap() {
		return LocalizationUtil.getLocalizationMap(getNombre());
	}

	@Override
	public void setNombre(String nombre) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nombre = nombre;
	}

	@Override
	public void setNombre(String nombre, Locale locale) {
		setNombre(nombre, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setNombre(String nombre, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(nombre)) {
			setNombre(
				LocalizationUtil.updateLocalization(
					getNombre(), "Nombre", nombre, languageId,
					defaultLanguageId));
		}
		else {
			setNombre(
				LocalizationUtil.removeLocalization(
					getNombre(), "Nombre", languageId));
		}
	}

	@Override
	public void setNombreCurrentLanguageId(String languageId) {
		_nombreCurrentLanguageId = languageId;
	}

	@Override
	public void setNombreMap(Map<Locale, String> nombreMap) {
		setNombreMap(nombreMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setNombreMap(
		Map<Locale, String> nombreMap, Locale defaultLocale) {

		if (nombreMap == null) {
			return;
		}

		setNombre(
			LocalizationUtil.updateLocalization(
				nombreMap, getNombre(), "Nombre",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getDescripcion() {
		if (_descripcion == null) {
			return "";
		}
		else {
			return _descripcion;
		}
	}

	@Override
	public void setDescripcion(String descripcion) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_descripcion = descripcion;
	}

	@JSON
	@Override
	public int getNumeroComensales() {
		return _numeroComensales;
	}

	@Override
	public void setNumeroComensales(int numeroComensales) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_numeroComensales = numeroComensales;
	}

	@JSON
	@Override
	public boolean getAptaCeliacos() {
		return _aptaCeliacos;
	}

	@JSON
	@Override
	public boolean isAptaCeliacos() {
		return _aptaCeliacos;
	}

	@Override
	public void setAptaCeliacos(boolean aptaCeliacos) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_aptaCeliacos = aptaCeliacos;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Receta.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Receta.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> nombreMap = getNombreMap();

		for (Map.Entry<Locale, String> entry : nombreMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(
			new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getNombre();

		if (xml == null) {
			return "";
		}

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(
			getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(
			getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(
			Receta.class.getName(), getPrimaryKey(), defaultLocale,
			availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String nombre = getNombre(defaultLocale);

		if (Validator.isNull(nombre)) {
			setNombre(getNombre(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setNombre(getNombre(defaultLocale), defaultLocale, defaultLocale);
		}
	}

	@Override
	public Receta toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Receta>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RecetaImpl recetaImpl = new RecetaImpl();

		recetaImpl.setUuid(getUuid());
		recetaImpl.setRecetaId(getRecetaId());
		recetaImpl.setCompanyId(getCompanyId());
		recetaImpl.setGroupId(getGroupId());
		recetaImpl.setUserId(getUserId());
		recetaImpl.setUserName(getUserName());
		recetaImpl.setCreateDate(getCreateDate());
		recetaImpl.setModifiedDate(getModifiedDate());
		recetaImpl.setNombre(getNombre());
		recetaImpl.setDescripcion(getDescripcion());
		recetaImpl.setNumeroComensales(getNumeroComensales());
		recetaImpl.setAptaCeliacos(isAptaCeliacos());

		recetaImpl.resetOriginalValues();

		return recetaImpl;
	}

	@Override
	public Receta cloneWithOriginalValues() {
		RecetaImpl recetaImpl = new RecetaImpl();

		recetaImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		recetaImpl.setRecetaId(this.<Long>getColumnOriginalValue("recetaId"));
		recetaImpl.setCompanyId(this.<Long>getColumnOriginalValue("companyId"));
		recetaImpl.setGroupId(this.<Long>getColumnOriginalValue("groupId"));
		recetaImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		recetaImpl.setUserName(this.<String>getColumnOriginalValue("userName"));
		recetaImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		recetaImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		recetaImpl.setNombre(this.<String>getColumnOriginalValue("nombre"));
		recetaImpl.setDescripcion(
			this.<String>getColumnOriginalValue("descripcion"));
		recetaImpl.setNumeroComensales(
			this.<Integer>getColumnOriginalValue("numeroComensales"));
		recetaImpl.setAptaCeliacos(
			this.<Boolean>getColumnOriginalValue("aptaCeliacos"));

		return recetaImpl;
	}

	@Override
	public int compareTo(Receta receta) {
		int value = 0;

		value = getNombre().compareTo(receta.getNombre());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Receta)) {
			return false;
		}

		Receta receta = (Receta)object;

		long primaryKey = receta.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Receta> toCacheModel() {
		RecetaCacheModel recetaCacheModel = new RecetaCacheModel();

		recetaCacheModel.uuid = getUuid();

		String uuid = recetaCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			recetaCacheModel.uuid = null;
		}

		recetaCacheModel.recetaId = getRecetaId();

		recetaCacheModel.companyId = getCompanyId();

		recetaCacheModel.groupId = getGroupId();

		recetaCacheModel.userId = getUserId();

		recetaCacheModel.userName = getUserName();

		String userName = recetaCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			recetaCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			recetaCacheModel.createDate = createDate.getTime();
		}
		else {
			recetaCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			recetaCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			recetaCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		recetaCacheModel.nombre = getNombre();

		String nombre = recetaCacheModel.nombre;

		if ((nombre != null) && (nombre.length() == 0)) {
			recetaCacheModel.nombre = null;
		}

		recetaCacheModel.descripcion = getDescripcion();

		String descripcion = recetaCacheModel.descripcion;

		if ((descripcion != null) && (descripcion.length() == 0)) {
			recetaCacheModel.descripcion = null;
		}

		recetaCacheModel.numeroComensales = getNumeroComensales();

		recetaCacheModel.aptaCeliacos = isAptaCeliacos();

		return recetaCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Receta, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Receta, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Receta, Object> attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Receta)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Receta, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Receta, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Receta, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Receta)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Receta>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private long _recetaId;
	private long _companyId;
	private long _groupId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _nombre;
	private String _nombreCurrentLanguageId;
	private String _descripcion;
	private int _numeroComensales;
	private boolean _aptaCeliacos;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Receta, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Receta)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("recetaId", _recetaId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("nombre", _nombre);
		_columnOriginalValues.put("descripcion", _descripcion);
		_columnOriginalValues.put("numeroComensales", _numeroComensales);
		_columnOriginalValues.put("aptaCeliacos", _aptaCeliacos);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("recetaId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("groupId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("nombre", 256L);

		columnBitmasks.put("descripcion", 512L);

		columnBitmasks.put("numeroComensales", 1024L);

		columnBitmasks.put("aptaCeliacos", 2048L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Receta _escapedModel;

}